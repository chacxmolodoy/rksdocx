import re
def extract_first_number(line):
    match = re.search(r'\d+', line)
    return int(match.group()) if match else None
def contains_letters(line):
    return bool(re.search(r'[А-Яа-я]', line))
input_file_path = 'cleardata.txt'
with open(input_file_path, 'r', encoding='utf-8') as file:
    lines = file.readlines()
arrays = []
current_array = []
prev_number = None
for line in lines:
    number = extract_first_number(line)
    if number is not None and contains_letters(line):
        if prev_number is None or number > prev_number:
            current_array.append(line.strip())
        else:
            if current_array:
                arrays.append(current_array)
            current_array = [line.strip()]
        prev_number = number
if current_array:
    arrays.append(current_array)
#~~~~~~~~~~~Получение Kp
#Металлодиэлектрические, металлизированные, резисторные сборки, поглотители

def get_KP_coefficient_metalized(temperature, ratio):
    data1 = {
        (25, 0.1): 0.35, (25, 0.2): 0.40, (25, 0.3): 0.45, (25, 0.4): 0.51, (25, 0.5): 0.58, (25, 0.6): 0.65,
        (25, 0.7): 0.72, (25, 0.8): 0.81, (25, 0.9): 0.90, (25, 1.0): 1.00,
        (30, 0.1): 0.36, (30, 0.2): 0.41, (30, 0.3): 0.47, (30, 0.4): 0.53, (30, 0.5): 0.59, (30, 0.6): 0.67,
        (30, 0.7): 0.75, (30, 0.8): 0.84, (30, 0.9): 0.94, (30, 1.0): 1.05,
        (35, 0.1): 0.37, (35, 0.2): 0.42, (35, 0.3): 0.48, (35, 0.4): 0.55, (35, 0.5): 0.62, (35, 0.6): 0.69,
        (35, 0.7): 0.78, (35, 0.8): 0.87, (35, 0.9): 0.98, (35, 1.0): 1.09,
        (40, 0.1): 0.38, (40, 0.2): 0.44, (40, 0.3): 0.50, (40, 0.4): 0.57, (40, 0.5): 0.64, (40, 0.6): 0.72,
        (40, 0.7): 0.81, (40, 0.8): 0.91, (40, 0.9): 1.02, (40, 1.0): 1.15,
        (45, 0.1): 0.40, (45, 0.2): 0.46, (45, 0.3): 0.52, (45, 0.4): 0.59, (45, 0.5): 0.66, (45, 0.6): 0.74,
        (45, 0.7): 0.85, (45, 0.8): 0.96, (45, 0.9): 1.08, (45, 1.0): 1.21,
        (50, 0.1): 0.41, (50, 0.2): 0.48, (50, 0.3): 0.54, (50, 0.4): 0.62, (50, 0.5): 0.70, (50, 0.6): 0.80,
        (50, 0.7): 0.90, (50, 0.8): 1.01, (50, 0.9): 1.14, (50, 1.0): 1.28,
        (55, 0.1): 0.43, (55, 0.2): 0.50, (55, 0.3): 0.57, (55, 0.4): 0.65, (55, 0.5): 0.74, (55, 0.6): 0.84,
        (55, 0.7): 0.95, (55, 0.8): 1.07, (55, 0.9): 1.21, (55, 1.0): 1.36,
        (60, 0.1): 0.46, (60, 0.2): 0.53, (60, 0.3): 0.61, (60, 0.4): 0.70, (60, 0.5): 0.80, (60, 0.6): 0.90,
        (60, 0.7): 1.01, (60, 0.8): 1.15, (60, 0.9): 1.29, (60, 1.0): 1.46,
        (65, 0.1): 0.48, (65, 0.2): 0.56, (65, 0.3): 0.65, (65, 0.4): 0.74, (65, 0.5): 0.84, (65, 0.6): 0.96,
        (65, 0.7): 1.08, (65, 0.8): 1.23, (65, 0.9): 1.39, (65, 1.0): 1.57,
        (70, 0.1): 0.52, (70, 0.2): 0.60, (70, 0.3): 0.69, (70, 0.4): 0.80, (70, 0.5): 0.91, (70, 0.6): 1.03,
        (70, 0.7): 1.18, (70, 0.8): 1.33, (70, 0.9): 1.51, (70, 1.0): 1.71,
        (75, 0.1): 0.56, (75, 0.2): 0.65, (75, 0.3): 0.75, (75, 0.4): 0.86, (75, 0.5): 0.99, (75, 0.6): 1.13,
        (75, 0.7): 1.28, (75, 0.8): 1.46, (75, 0.9): 1.65, (75, 1.0): 1.87,
        (80, 0.1): 0.61, (80, 0.2): 0.71, (80, 0.3): 0.82, (80, 0.4): 0.94, (80, 0.5): 1.08, (80, 0.6): 1.24,
        (80, 0.7): 1.41, (80, 0.8): 1.60, (80, 0.9): 1.82, (80, 1.0): 2.06,
        (85, 0.1): 0.67, (85, 0.2): 0.78, (85, 0.3): 0.90, (85, 0.4): 1.04, (85, 0.5): 1.20, (85, 0.6): 1.37,
        (85, 0.7): 1.57, (85, 0.8): 1.78, (85, 0.9): 2.03, (85, 1.0): 2.31,
        (90, 0.1): 0.74, (90, 0.2): 0.87, (90, 0.3): 1.01, (90, 0.4): 1.17, (90, 0.5): 1.34, (90, 0.6): 1.54,
        (90, 0.7): 1.76, (90, 0.8): 2.01, (90, 0.9): 2.29, (90, 1.0): 2.60,
        (95, 0.1): 0.83, (95, 0.2): 0.98, (95, 0.3): 1.14, (95, 0.4): 1.32, (95, 0.5): 1.52, (95, 0.6): 1.75,
        (95, 0.7): 2.00, (95, 0.8): 2.29, (95, 0.9): 2.61, (95, 1.0): 2.98,
        (100, 0.1): 0.95, (100, 0.2): 1.12, (100, 0.3): 1.31, (100, 0.4): 1.52, (100, 0.5): 1.75, (100, 0.6): 2.01,
        (100, 0.7): 2.31, (100, 0.8): 2.64, (100, 0.9): 3.02, (100, 1.0): 3.45,
        (105, 0.1): 1.10, (105, 0.2): 1.30, (105, 0.3): 1.52, (105, 0.4): 1.77, (105, 0.5): 2.04, (105, 0.6): 2.35,
        (105, 0.7): 2.71, (105, 0.8): 3.10, (105, 0.9): 3.55, (105, 1.0): 4.06,
        (110, 0.1): 1.30, (110, 0.2): 1.54, (110, 0.3): 1.80, (110, 0.4): 2.09, (110, 0.5): 2.42, (110, 0.6): 2.80,
        (110, 0.7): 3.22, (110, 0.8): 3.70, (110, 0.9): 4.24, (110, 1.0): 4.86,
        (115, 0.1): 1.56, (115, 0.2): 1.85, (115, 0.3): 2.17, (115, 0.4): 2.53, (115, 0.5): 2.93, (115, 0.6): 3.39,
        (115, 0.7): 3.91, (115, 0.8): 4.50, (115, 0.9): 5.17,
        (120, 0.1): 1.91, (120, 0.2): 2.27, (120, 0.3): 2.67, (120, 0.4): 3.12, (120, 0.5): 3.62, (120, 0.6): 4.19,
        (120, 0.7): 4.84, (120, 0.8): 5.58,
        (125, 0.1): 2.40, (125, 0.2): 2.85, (125, 0.3): 3.35, (125, 0.4): 3.92, (125, 0.5): 4.57, (125, 0.6): 5.30,
        (130, 0.1): 3.08, (130, 0.2): 3.67, (130, 0.3): 4.32, (130, 0.4): 5.07,
        (135, 0.1): 4.06, (135, 0.2): 4.85,
        (140, 0.1): 5.52
    }
    return data1.get((temperature, ratio), "Значение не найдено")
#Композиционные пленочныe
def get_KP_coefficient_kompozed_plenochniye(temperature, ratio):
    data2 = {
        (25, 0.1): 0.27, (25, 0.2): 0.33, (25, 0.3): 0.39, (25, 0.4): 0.45, (25, 0.5): 0.52, (25, 0.6): 0.60,
        (25, 0.7): 0.68, (25, 0.8): 0.77, (25, 0.9): 0.88, (25, 1.0): 0.99,
        (30, 0.1): 0.29, (30, 0.2): 0.35, (30, 0.3): 0.41, (30, 0.4): 0.48, (30, 0.5): 0.56, (30, 0.6): 0.64,
        (30, 0.7): 0.74, (30, 0.8): 0.84, (30, 0.9): 0.95, (30, 1.0): 1.08,
        (35, 0.1): 0.31, (35, 0.2): 0.37, (35, 0.3): 0.44, (35, 0.4): 0.52, (35, 0.5): 0.60, (35, 0.6): 0.69,
        (35, 0.7): 0.79, (35, 0.8): 0.91, (35, 0.9): 1.03, (35, 1.0): 1.17,
        (40, 0.1): 0.33, (40, 0.2): 0.40, (40, 0.3): 0.47, (40, 0.4): 0.56, (40, 0.5): 0.65, (40, 0.6): 0.75,
        (40, 0.7): 0.86, (40, 0.8): 0.98, (40, 0.9): 1.12, (40, 1.0): 1.27,
        (45, 0.1): 0.35, (45, 0.2): 0.43, (45, 0.3): 0.51, (45, 0.4): 0.60, (45, 0.5): 0.70, (45, 0.6): 0.81,
        (45, 0.7): 0.93, (45, 0.8): 1.07, (45, 0.9): 1.22, (45, 1.0): 1.39,
        (50, 0.1): 0.38, (50, 0.2): 0.46, (50, 0.3): 0.55, (50, 0.4): 0.65, (50, 0.5): 0.76, (50, 0.6): 0.88,
        (50, 0.7): 1.01, (50, 0.8): 1.17, (50, 0.9): 1.33, (50, 1.0): 1.52,
        (55, 0.1): 0.40, (55, 0.2): 0.50, (55, 0.3): 0.59, (55, 0.4): 0.70, (55, 0.5): 0.82, (55, 0.6): 0.96,
        (55, 0.7): 1.11, (55, 0.8): 1.27, (55, 0.9): 1.46, (55, 1.0): 1.67
    }
    return data2.get((temperature, ratio), "Значение не найдено")
#Композиционные объемные
def get_KP_value_kompozicionie(temperature, kr):
    table = {
        25: {0.1: 0.44, 0.2: 0.47, 0.3: 0.50, 0.4: 0.54, 0.5: 0.59, 0.6: 0.65, 0.7: 0.72, 0.8: 0.80, 0.9: 0.89,
             1.0: 1.00},
        30: {0.1: 0.46, 0.2: 0.49, 0.3: 0.53, 0.4: 0.57, 0.5: 0.63, 0.6: 0.69, 0.7: 0.77, 0.8: 0.85, 0.9: 0.95,
             1.0: 1.07},
        35: {0.1: 0.49, 0.2: 0.52, 0.3: 0.56, 0.4: 0.61, 0.5: 0.67, 0.6: 0.74, 0.7: 0.82, 0.8: 0.91, 0.9: 1.03,
             1.0: 1.16},
        40: {0.1: 0.52, 0.2: 0.55, 0.3: 0.59, 0.4: 0.65, 0.5: 0.71, 0.6: 0.79, 0.7: 0.88, 0.8: 0.98, 0.9: 1.11,
             1.0: 1.25},
        45: {0.1: 0.55, 0.2: 0.58, 0.3: 0.63, 0.4: 0.69, 0.5: 0.76, 0.6: 0.84, 0.7: 0.94, 0.8: 1.06, 0.9: 1.19,
             1.0: 1.36},
        50: {0.1: 0.58, 0.2: 0.62, 0.3: 0.67, 0.4: 0.73, 0.5: 0.81, 0.6: 0.90, 0.7: 1.01, 0.8: 1.14, 0.9: 1.29,
             1.0: 1.47},
        55: {0.1: 0.61, 0.2: 0.65, 0.3: 0.71, 0.4: 0.78, 0.5: 0.86, 0.6: 0.96, 0.7: 1.08, 0.8: 1.22, 0.9: 1.39,
             1.0: 1.59},
        60: {0.1: 0.65, 0.2: 0.69, 0.3: 0.76, 0.4: 0.83, 0.5: 0.92, 0.6: 1.03, 0.7: 1.16, 0.8: 1.32, 0.9: 1.51,
             1.0: 1.73},
        65: {0.1: 0.69, 0.2: 0.74, 0.3: 0.80, 0.4: 0.89, 0.5: 0.99, 0.6: 1.11, 0.7: 1.25, 0.8: 1.43, 0.9: 1.63,
             1.0: 1.88},
        70: {0.1: 0.73, 0.2: 0.78, 0.3: 0.86, 0.4: 0.95, 0.5: 1.06, 0.6: 1.19, 0.7: 1.35, 0.8: 1.54, 0.9: 1.77,
             1.0: 2.04},
        75: {0.1: 0.77, 0.2: 0.84, 0.3: 0.91, 0.4: 1.01, 0.5: 1.13, 0.6: 1.28, 0.7: 1.46, 0.8: 1.67, 0.9: 1.92,
             1.0: 2.22},
        80: {0.1: 0.82, 0.2: 0.89, 0.3: 0.98, 0.4: 1.09, 0.5: 1.22, 0.6: 1.38, 0.7: 1.57, 0.8: 1.81, 0.9: 2.09,
             1.0: 2.43},
        85: {0.1: 0.88, 0.2: 0.95, 0.3: 1.04, 0.4: 1.16, 0.5: 1.31, 0.6: 1.48, 0.7: 1.70, 0.8: 1.96, 0.9: 2.27,
             1.0: 2.65},
    }
    try:
        value = table[temperature][kr]
        return value
    except KeyError:
        return "Нету значения в таблице"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~сверху для Резисторы постоянные непроволочные
# рассчет Кр для резисторы постоянные проволочные и фольговые
#Нагрузочные
def get_KP_value_nagruzoch(temperature, kr):
    new_table = {
        25: {0.1: 0.14, 0.2: 0.17, 0.3: 0.21, 0.4: 0.26, 0.5: 0.32, 0.6: 0.40, 0.7: 0.50, 0.8: 0.62, 0.9: 0.79,
             1.0: 1.00},
        30: {0.1: 0.15, 0.2: 0.18, 0.3: 0.22, 0.4: 0.27, 0.5: 0.34, 0.6: 0.42, 0.7: 0.53, 0.8: 0.67, 0.9: 0.85,
             1.0: 1.09},
        35: {0.1: 0.16, 0.2: 0.19, 0.3: 0.23, 0.4: 0.29, 0.5: 0.36, 0.6: 0.46, 0.7: 0.58, 0.8: 0.73, 0.9: 0.93,
             1.0: 1.18},
        40: {0.1: 0.17, 0.2: 0.20, 0.3: 0.25, 0.4: 0.30, 0.5: 0.39, 0.6: 0.49, 0.7: 0.62, 0.8: 0.79, 0.9: 1.01,
             1.0: 1.29},
        45: {0.1: 0.17, 0.2: 0.21, 0.3: 0.26, 0.4: 0.33, 0.5: 0.41, 0.6: 0.53, 0.7: 0.67, 0.8: 0.86, 0.9: 1.10,
             1.0: 1.42},
        50: {0.1: 0.18, 0.2: 0.22, 0.3: 0.28, 0.4: 0.35, 0.5: 0.44, 0.6: 0.57, 0.7: 0.72, 0.8: 0.93, 0.9: 1.20,
             1.0: 1.55},
        55: {0.1: 0.19, 0.2: 0.24, 0.3: 0.30, 0.4: 0.37, 0.5: 0.48, 0.6: 0.61, 0.7: 0.78, 0.8: 1.01, 0.9: 1.31,
             1.0: 1.70},
        60: {0.1: 0.20, 0.2: 0.25, 0.3: 0.32, 0.4: 0.40, 0.5: 0.53, 0.6: 0.66, 0.7: 0.85, 0.8: 1.11, 0.9: 1.43,
             1.0: 1.89},
        65: {0.1: 0.21, 0.2: 0.27, 0.3: 0.34, 0.4: 0.43, 0.5: 0.55, 0.6: 0.71, 0.7: 0.92, 0.8: 1.20, 0.9: 1.56,
             1.0: 2.05},
        70: {0.1: 0.23, 0.2: 0.28, 0.3: 0.36, 0.4: 0.46, 0.5: 0.59, 0.6: 0.77, 0.7: 1.00, 0.8: 1.30, 0.9: 1.71,
             1.0: 2.25},
        75: {0.1: 0.24, 0.2: 0.30, 0.3: 0.38, 0.4: 0.49, 0.5: 0.64, 0.6: 0.83, 0.7: 1.08, 0.8: 1.42, 0.9: 1.88,
             1.0: 2.48},
        80: {0.1: 0.26, 0.2: 0.32, 0.3: 0.40, 0.4: 0.53, 0.5: 0.69, 0.6: 0.90, 0.7: 1.15, 0.8: 1.53, 0.9: 2.04,
             1.0: 2.73},
        85: {0.1: 0.27, 0.2: 0.34, 0.3: 0.44, 0.4: 0.57, 0.5: 0.74, 0.6: 0.97, 0.7: 1.28, 0.8: 1.70, 0.9: 2.26,
             1.0: 3.03},
        90: {0.1: 0.29, 0.2: 0.37, 0.3: 0.47, 0.4: 0.61, 0.5: 0.80, 0.6: 1.06, 0.7: 1.40, 0.8: 1.86, 0.9: 2.49,
             1.0: 3.34},
        95: {0.1: 0.31, 0.2: 0.39, 0.3: 0.51, 0.4: 0.66, 0.5: 0.87, 0.6: 1.15, 0.7: 1.53, 0.8: 2.04, 0.9: 2.74,
             1.0: 3.69},
        100: {0.1: 0.33, 0.2: 0.42, 0.3: 0.55, 0.4: 0.71, 0.5: 0.94, 0.6: 1.25, 0.7: 1.67, 0.8: 2.24, 0.9: 3.02,
              1.0: 4.09},
    }
    try:
        value = new_table[temperature][kr]
        return value
    except KeyError:
        return "Значение не найдено"
#Прецизионные
def get_KP_value_pretizicionnie(temperature, kr):
    latest_table = {
        25: {0.1: 0.12, 0.2: 0.15, 0.3: 0.18, 0.4: 0.23, 0.5: 0.29, 0.6: 0.37, 0.7: 0.47, 0.8: 0.60, 0.9: 0.78,
             1.0: 1.01},
        30: {0.1: 0.12, 0.2: 0.15, 0.3: 0.19, 0.4: 0.24, 0.5: 0.30, 0.6: 0.39, 0.7: 0.50, 0.8: 0.64, 0.9: 0.83,
             1.0: 1.08},
        35: {0.1: 0.13, 0.2: 0.16, 0.3: 0.19, 0.4: 0.25, 0.5: 0.31, 0.6: 0.40, 0.7: 0.52, 0.8: 0.68, 0.9: 0.83,
             1.0: 1.17},
        40: {0.1: 0.13, 0.2: 0.16, 0.3: 0.20, 0.4: 0.25, 0.5: 0.33, 0.6: 0.42, 0.7: 0.55, 0.8: 0.73, 0.9: 0.96,
             1.0: 1.27},
        45: {0.1: 0.13, 0.2: 0.16, 0.3: 0.21, 0.4: 0.26, 0.5: 0.34, 0.6: 0.45, 0.7: 0.59, 0.8: 0.77, 0.9: 1.03,
             1.0: 1.37},
        50: {0.1: 0.13, 0.2: 0.17, 0.3: 0.21, 0.4: 0.27, 0.5: 0.36, 0.6: 0.47, 0.7: 0.62, 0.8: 0.83, 0.9: 1.11,
             1.0: 1.49},
        55: {0.1: 0.14, 0.2: 0.17, 0.3: 0.22, 0.4: 0.29, 0.5: 0.38, 0.6: 0.50, 0.7: 0.66, 0.8: 0.89, 0.9: 1.20,
             1.0: 1.63},
        60: {0.1: 0.14, 0.2: 0.18, 0.3: 0.23, 0.4: 0.30, 0.5: 0.39, 0.6: 0.53, 0.7: 0.71, 0.8: 0.96, 0.9: 1.30,
             1.0: 1.78},
        65: {0.1: 0.14, 0.2: 0.18, 0.3: 0.24, 0.4: 0.31, 0.5: 0.42, 0.6: 0.56, 0.7: 0.76, 0.8: 1.03, 0.9: 1.41,
             1.0: 1.95},
        70: {0.1: 0.15, 0.2: 0.19, 0.3: 0.25, 0.4: 0.33, 0.5: 0.44, 0.6: 0.60, 0.7: 0.81, 0.8: 1.12, 0.9: 1.54,
             1.0: 2.14},
        75: {0.1: 0.16, 0.2: 0.20, 0.3: 0.26, 0.4: 0.35, 0.5: 0.47, 0.6: 0.64, 0.7: 0.85, 0.8: 1.21, 0.9: 1.69,
             1.0: 2.36},
        80: {0.1: 0.16, 0.2: 0.21, 0.3: 0.28, 0.4: 0.37, 0.5: 0.50, 0.6: 0.68, 0.7: 0.90, 0.8: 1.28, 0.9: 1.82,
             1.0: 2.62},
        85: {0.1: 0.16, 0.2: 0.21, 0.3: 0.28, 0.4: 0.39, 0.5: 0.53, 0.6: 0.73, 0.7: 1.03, 0.8: 1.44, 0.9: 2.05,
             1.0: 2.91},
        90: {0.1: 0.17, 0.2: 0.22, 0.3: 0.30, 0.4: 0.41, 0.5: 0.57, 0.6: 0.79, 0.7: 1.12, 0.8: 1.59, 0.9: 2.27,
             1.0: 3.25},
        95: {0.1: 0.18, 0.2: 0.24, 0.3: 0.32, 0.4: 0.44, 0.5: 0.61, 0.6: 0.86, 0.7: 1.22, 0.8: 1.75, 0.9: 2.52,
             1.0: 3.65},
        100: {0.1: 0.19, 0.2: 0.25, 0.3: 0.34, 0.4: 0.47, 0.5: 0.66, 0.6: 0.94, 0.7: 1.35, 0.8: 1.94, 0.9: 2.82,
              1.0: 4.12},
    }
    try:
        value = latest_table[temperature][kr]
        return value
    except KeyError:
        return "Значение не найдено"
#Особостабильные
def get_KP_value_osobostabilnie(temperature, kp):
    data = {
        25: [0.44, 0.46, 0.49, 0.52, 0.57, 0.62, 0.69, 0.77, 0.87, 0.99],
        30: [0.51, 0.53, 0.56, 0.61, 0.66, 0.73, 0.81, 0.90, 1.02, 1.17],
        35: [0.59, 0.62, 0.66, 0.71, 0.77, 0.85, 0.95, 1.07, 1.21, 1.39],
        40: [0.70, 0.74, 0.78, 0.84, 0.92, 1.02, 1.14, 1.29, 1.46, 1.67],
        45: [0.84, 0.88, 0.93, 1.01, 1.11, 1.22, 1.37, 1.55, 1.77, 2.04],
        50: [1.01, 1.06, 1.13, 1.22, 1.34, 1.49, 1.68, 1.90, 2.18, 2.52],
        55: [1.24, 1.30, 1.39, 1.51, 1.66, 1.84, 2.08, 2.37, 2.72, 3.16],
        60: [1.53, 1.61, 1.73, 1.88, 2.07, 2.31, 2.61, 2.98, 3.44, 4.01],
        65: [1.93, 2.03, 2.18, 2.37, 2.64, 2.94, 3.33, 3.81, 4.42, 5.17],
        70: [2.46, 2.60, 2.79, 3.05, 3.39, 3.79, 4.31, 4.95, 5.76, 6.76],
        75: [3.20, 3.38, 3.64, 3.98, 4.42, 4.97, 5.67, 6.54, 7.62, 8.98],
        80: [4.23, 4.47, 4.84, 5.28, 5.88, 6.64, 7.59, 8.78, 10.27, 12.15],
        85: [5.68, 6.01, 6.49, 7.13, 7.96, 9.01, 10.33, 11.99, 14.08, 16.72]
    }
    kp_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    try:
        kp_index = kp_values.index(kp)
    except ValueError:
        return "Значение не найдено"
    try:
        value = data[temperature][kp_index]
    except KeyError:
        return "Значение не найдено"
    return value

#Фольговые
def get_KP_value_folgovie(temperature, kp):
    data = {
        25: [0.42, 0.47, 0.52, 0.59, 0.66, 0.74, 0.83, 0.94, 1.06, 1.20],
        30: [0.51, 0.56, 0.63, 0.70, 0.79, 0.89, 1.00, 1.13, 1.27, 1.44],
        35: [0.61, 0.67, 0.75, 0.84, 0.94, 1.06, 1.20, 1.35, 1.53, 1.73],
        40: [0.73, 0.80, 0.90, 1.00, 1.13, 1.27, 1.43, 1.62, 1.82, 2.05],
        45: [0.87, 0.96, 1.07, 1.20, 1.35, 1.52, 1.71, 1.93, 2.19, 2.48],
        50: [1.03, 1.15, 1.28, 1.43, 1.61, 1.81, 2.05, 2.31, 2.62, 2.97],
        55: [1.23, 1.37, 1.53, 1.71, 1.92, 2.17, 2.44, 2.76, 3.13, 3.54],
        60: [1.47, 1.63, 1.82, 2.04, 2.29, 2.57, 2.92, 3.30, 3.73, 4.23],
        65: [1.75, 1.94, 2.17, 2.43, 2.73, 3.08, 3.48, 3.93, 4.45, 5.05],
        70: [2.08, 2.31, 2.58, 2.90, 3.25, 3.67, 4.14, 4.68, 5.30, 6.01],
        75: [2.48, 2.75, 3.07, 3.44, 3.87, 4.36, 4.93, 5.57, 6.31, 7.16],
        80: [2.94, 3.27, 3.64, 4.09, 4.61, 5.18, 5.86, 6.63, 7.51, 8.52],
        85: [3.49, 3.88, 4.34, 4.86, 5.47, 6.17, 6.96, 7.88, 8.93, 10.14],
        90: [4.15, 4.61, 5.15, 5.77, 6.49, 7.32, 8.27, 9.36, 10.61, 12.05],
        95: [4.92, 5.46, 6.10, 6.85, 7.70, 8.69, 9.82, 11.11, 12.60, 14.30],
        100: [5.82, 6.47, 7.23, 8.11, 9.13, 10.3, 11.64, 13.18, 14.95, 16.97]
    }
    kp_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    try:
        kp_index = kp_values.index(kp)
    except ValueError:
        return "Kp value not in range"
    try:
        value = data[temperature][kp_index]
    except KeyError:
        return "Temperature not in range"
    return value
#Резисторы переменные непроволочные
#Металлоокисные
def get_KP_value_metaloxide(temperature, kp):
    data = {
        25: [0.66, 0.69, 0.72, 0.76, 0.79, 0.83, 0.87, 0.91, 0.95, 1.00],
        30: [0.67, 0.70, 0.74, 0.77, 0.81, 0.85, 0.89, 0.94, 0.98, 1.03],
        35: [0.68, 0.72, 0.75, 0.79, 0.83, 0.88, 0.92, 0.97, 1.02, 1.07],
        40: [0.70, 0.73, 0.77, 0.81, 0.86, 0.90, 0.95, 1.00, 1.05, 1.11],
        45: [0.71, 0.75, 0.79, 0.84, 0.88, 0.93, 0.98, 1.03, 1.09, 1.15],
        50: [0.73, 0.77, 0.82, 0.86, 0.91, 0.97, 1.02, 1.08, 1.14, 1.21],
        55: [0.75, 0.79, 0.84, 0.89, 0.95, 1.00, 1.06, 1.13, 1.20, 1.27],
        60: [0.77, 0.82, 0.87, 0.93, 0.98, 1.04, 1.11, 1.18, 1.25, 1.33],
        65: [0.80, 0.85, 0.90, 0.96, 1.03, 1.09, 1.16, 1.23, 1.31, 1.40],
        70: [0.83, 0.89, 0.95, 1.01, 1.07, 1.14, 1.22, 1.30, 1.38, 1.48],
        75: [0.86, 0.92, 0.98, 1.05, 1.12, 1.20, 1.29, 1.38, 1.47, 1.58],
        80: [0.90, 0.96, 1.03, 1.10, 1.18, 1.27, 1.36, 1.46, 1.57, 1.68],
        85: [0.94, 1.01, 1.08, 1.14, 1.23, 1.33, 1.43, 1.54, 1.67, 1.80],
        90: [0.99, 1.06, 1.14, 1.21, 1.31, 1.41, 1.53, 1.66, 1.79],
        95: [1.04, 1.12, 1.21, 1.31, 1.42, 1.53, 1.66, 1.79, 1.93],
        100: [1.10, 1.20, 1.30, 1.40, 1.52, 1.65, 1.78, 1.93, 2.09]
    }
    kp_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

    try:
        kp_index = kp_values.index(kp)
    except ValueError:
        return "Kp value not in range"

    try:
        value = data[temperature][kp_index]
    except KeyError:
        return "Temperature not in range"

    return value
#Керметные
def get_KP_value_kermetnie(temperature, kp):
    data = {
        25: [0.67, 0.72, 0.76, 0.80, 0.83, 0.87, 0.90, 0.94, 0.97, 1.00],
        30: [0.72, 0.77, 0.82, 0.86, 0.90, 0.93, 0.97, 1.01, 1.04, 1.08],
        35: [0.78, 0.84, 0.89, 0.93, 0.98, 1.02, 1.06, 1.10, 1.14, 1.18],
        40: [0.86, 0.92, 0.97, 1.03, 1.07, 1.12, 1.17, 1.21, 1.25, 1.30],
        45: [0.95, 1.02, 1.09, 1.14, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45],
        50: [1.08, 1.16, 1.23, 1.30, 1.36, 1.42, 1.48, 1.54, 1.60, 1.65],
        55: [1.24, 1.34, 1.42, 1.50, 1.57, 1.64, 1.71, 1.78, 1.84, 1.91],
        60: [1.46, 1.57, 1.67, 1.77, 1.85, 1.94, 2.02, 2.10, 2.16, 2.23],
        65: [1.76, 1.90, 2.02, 2.13, 2.24, 2.34, 2.44, 2.54, 2.64, 2.73],
        70: [2.17, 2.34, 2.49, 2.63, 2.77, 2.90, 3.03, 3.15, 3.27, 3.39],
        75: [2.75, 2.93, 3.17, 3.35, 3.52, 3.69, 3.85, 4.01, 4.17, 4.32],
        80: [3.61, 3.91, 4.17, 4.41, 4.64, 4.86, 5.07, 5.29, 5.50, 5.71],
        85: [4.91, 5.32, 5.68, 6.01, 6.32, 6.63, 6.93, 7.22, 7.52, 7.81],
        90: [6.07, 7.54, 8.05, 8.53, 8.98, 9.42, 9.85, 10.27, 10.7, 11.12],
        95: [10.31, 11.19, 11.96, 12.67, 13.35, 14.01, 14.66, 15.29, 15.93, 16.56],
        100: [16.07, 17.45, 18.66, 19.79, 20.86, 21.9, 22.93, 23.94, 24.94, 25.94]
    }
    kp_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

    try:
        kp_index = kp_values.index(kp)
    except ValueError:
        return "Kp value not in range"

    try:
        value = data[temperature][kp_index]
    except KeyError:
        return "Temperature not in range"

    return value

#Композиционные пленочные
def get_KP_value_komposed_plenochnie(temp, ratio):
    data = {
        25: {0.1: 0.15, 0.2: 0.19, 0.3: 0.24, 0.4: 0.30, 0.5: 0.36, 0.6: 0.45, 0.7: 0.54, 0.8: 0.66, 0.9: 0.80,
             1.0: 0.97},
        30: {0.1: 0.16, 0.2: 0.21, 0.3: 0.26, 0.4: 0.33, 0.5: 0.40, 0.6: 0.50, 0.7: 0.61, 0.8: 0.74, 0.9: 0.90,
             1.0: 1.09},
        35: {0.1: 0.18, 0.2: 0.23, 0.3: 0.29, 0.4: 0.36, 0.5: 0.45, 0.6: 0.55, 0.7: 0.68, 0.8: 0.83, 0.9: 1.01,
             1.0: 1.23},
        40: {0.1: 0.20, 0.2: 0.26, 0.3: 0.33, 0.4: 0.40, 0.5: 0.50, 0.6: 0.62, 0.7: 0.77, 0.8: 0.94, 0.9: 1.15,
             1.0: 1.41},
        45: {0.1: 0.22, 0.2: 0.29, 0.3: 0.36, 0.4: 0.46, 0.5: 0.57, 0.6: 0.71, 0.7: 0.87, 0.8: 1.07, 0.9: 1.32,
             1.0: 1.61},
        50: {0.1: 0.25, 0.2: 0.32, 0.3: 0.41, 0.4: 0.52, 0.5: 0.65, 0.6: 0.81, 0.7: 1.00, 0.8: 1.23, 0.9: 1.52,
             1.0: 1.86},
        55: {0.1: 0.28, 0.2: 0.37, 0.3: 0.47, 0.4: 0.59, 0.5: 0.75, 0.6: 0.93, 0.7: 1.16, 0.8: 1.43, 0.9: 1.77,
             1.0: 2.17},
        60: {0.1: 0.33, 0.2: 0.42, 0.3: 0.54, 0.4: 0.69, 0.5: 0.87, 0.6: 1.09, 0.7: 1.35, 0.8: 1.68, 0.9: 2.08,
             1.0: 2.56},
        65: {0.1: 0.38, 0.2: 0.49, 0.3: 0.63, 0.4: 0.81, 0.5: 1.02, 0.6: 1.28, 0.7: 1.60, 0.8: 1.99, 0.9: 2.46,
             1.0: 3.06},
        70: {0.1: 0.44, 0.2: 0.58, 0.3: 0.75, 0.4: 0.95, 0.5: 1.21, 0.6: 1.52, 0.7: 1.90, 0.8: 2.37, 0.9: 2.95,
             1.0: 3.66},
        75: {0.1: 0.52, 0.2: 0.69, 0.3: 0.89, 0.4: 1.14, 0.5: 1.44, 0.6: 1.82, 0.7: 2.29, 0.8: 2.87, 0.9: 3.51,
             1.0: None},
        80: {0.1: 0.62, 0.2: 0.82, 0.3: 1.07, 0.4: 1.38, 0.5: 1.75, 0.6: 2.22, 0.7: 2.80, 0.8: 3.51, 0.9: None,
             1.0: None},
        85: {0.1: 0.76, 0.2: 1.00, 0.3: 1.31, 0.4: 1.68, 0.5: 2.15, 0.6: 2.73, 0.7: 3.46, 0.8: None, 0.9: None,
             1.0: None},
        90: {0.1: 0.93, 0.2: 1.24, 0.3: 1.62, 0.4: 2.09, 0.5: 2.68, 0.6: 3.41, 0.7: None, 0.8: None, 0.9: None,
             1.0: None},
        95: {0.1: 1.16, 0.2: 1.55, 0.3: 2.03, 0.4: 2.63, 0.5: 3.38, 0.6: 4.32, 0.7: None, 0.8: None, 0.9: None,
             1.0: None},
        100: {0.1: 1.47, 0.2: 1.96, 0.3: 2.58, 0.4: 3.35, 0.5: 4.33, 0.6: None, 0.7: None, 0.8: None, 0.9: None,
              1.0: None}}
    if temp not in data:
        return "Temperature not in table"
    if ratio not in data[temp]:
        return "Ratio not in table"

    value = data[temp][ratio]
    return value
#Композиционные объемные, потенциометры
def get_KP_value_kompozicionie_obiemnie_potenciometri(temp, ratio):
    data = {
        25: {0.1: 0.76, 0.2: 0.78, 0.3: 0.79, 0.4: 0.81, 0.5: 0.84, 0.6: 0.86, 0.7: 0.89, 0.8: 0.92, 0.9: 0.95,
             1.0: 0.99},
        30: {0.1: 0.77, 0.2: 0.79, 0.3: 0.81, 0.4: 0.83, 0.5: 0.85, 0.6: 0.88, 0.7: 0.90, 0.8: 0.93, 0.9: 0.97,
             1.0: 1.01},
        35: {0.1: 0.79, 0.2: 0.81, 0.3: 0.83, 0.4: 0.85, 0.5: 0.87, 0.6: 0.90, 0.7: 0.93, 0.8: 0.96, 0.9: 1.00,
             1.0: 1.04},
        40: {0.1: 0.81, 0.2: 0.82, 0.3: 0.84, 0.4: 0.87, 0.5: 0.89, 0.6: 0.92, 0.7: 0.95, 0.8: 0.99, 0.9: 1.03,
             1.0: 1.07},
        45: {0.1: 0.83, 0.2: 0.84, 0.3: 0.87, 0.4: 0.89, 0.5: 0.92, 0.6: 0.95, 0.7: 0.98, 0.8: 1.02, 0.9: 1.05,
             1.0: 1.10},
        50: {0.1: 0.85, 0.2: 0.87, 0.3: 0.89, 0.4: 0.91, 0.5: 0.94, 0.6: 0.98, 0.7: 1.01, 0.8: 1.05, 0.9: 1.09,
             1.0: 1.13},
        55: {0.1: 0.87, 0.2: 0.89, 0.3: 0.92, 0.4: 0.94, 0.5: 0.97, 0.6: 1.01, 0.7: 1.05, 0.8: 1.08, 0.9: 1.13,
             1.0: 1.17},
        60: {0.1: 0.90, 0.2: 0.92, 0.3: 0.95, 0.4: 0.98, 0.5: 1.01, 0.6: 1.04, 0.7: 1.08, 0.8: 1.12, 0.9: 1.17,
             1.0: 1.22},
        65: {0.1: 0.93, 0.2: 0.96, 0.3: 0.98, 0.4: 1.01, 0.5: 1.05, 0.6: 1.08, 0.7: 1.12, 0.8: 1.17, 0.9: 1.22,
             1.0: 1.27},
        70: {0.1: 0.97, 0.2: 0.99, 0.3: 1.02, 0.4: 1.05, 0.5: 1.09, 0.6: 1.13, 0.7: 1.17, 0.8: 1.22, 0.9: 1.27,
             1.0: 1.33},
        75: {0.1: 1.01, 0.2: 1.04, 0.3: 1.07, 0.4: 1.10, 0.5: 1.15, 0.6: 1.19, 0.7: 1.23, 0.8: 1.29, 0.9: 1.33,
             1.0: 1.39},
        80: {0.1: 1.06, 0.2: 1.09, 0.3: 1.12, 0.4: 1.15, 0.5: 1.19, 0.6: 1.24, 0.7: 1.29, 0.8: 1.34, 0.9: 1.40,
             1.0: 1.47},
        85: {0.1: 1.11, 0.2: 1.14, 0.3: 1.18, 0.4: 1.21, 0.5: 1.26, 0.6: 1.31, 0.7: 1.36, 0.8: 1.42, 0.9: 1.48,
             1.0: 1.55},
        90: {0.1: 1.18, 0.2: 1.21, 0.3: 1.24, 0.4: 1.28, 0.5: 1.33, 0.6: 1.38, 0.7: 1.44, 0.8: 1.51, 0.9: 1.57,
             1.0: 1.65},
        95: {0.1: 1.25, 0.2: 1.28, 0.3: 1.32, 0.4: 1.37, 0.5: 1.42, 0.6: 1.47, 0.7: 1.54, 0.8: 1.60, 0.9: 1.68,
             1.0: 1.76},
        100: {0.1: 1.33, 0.2: 1.37, 0.3: 1.41, 0.4: 1.46, 0.5: 1.51, 0.6: 1.58, 0.7: 1.65, 0.8: 1.72, 0.9: 1.80,
              1.0: 1.89}
    }
    if temp not in data:
        return "Temperature not in table"
    if ratio not in data[temp]:
        return "Ratio not in table"

    value = data[temp][ratio]
    return value
#Резисторы переменные проволочные
def get_KP_value_peremenie_provolochnie(temp, ratio):
    data = {
        25: {0.1: 0.31, 0.2: 0.38, 0.3: 0.45, 0.4: 0.52, 0.5: 0.59, 0.6: 0.66, 0.7: 0.74, 0.8: 0.82, 0.9: 0.91,
             1.0: 1.00},
        30: {0.1: 0.32, 0.2: 0.40, 0.3: 0.47, 0.4: 0.54, 0.5: 0.61, 0.6: 0.69, 0.7: 0.77, 0.8: 0.85, 0.9: 0.94,
             1.0: 1.04},
        35: {0.1: 0.34, 0.2: 0.41, 0.3: 0.48, 0.4: 0.56, 0.5: 0.64, 0.6: 0.72, 0.7: 0.80, 0.8: 0.89, 0.9: 0.99,
             1.0: 1.09},
        40: {0.1: 0.35, 0.2: 0.43, 0.3: 0.51, 0.4: 0.59, 0.5: 0.67, 0.6: 0.76, 0.7: 0.85, 0.8: 0.95, 0.9: 1.05,
             1.0: 1.16},
        45: {0.1: 0.38, 0.2: 0.46, 0.3: 0.55, 0.4: 0.64, 0.5: 0.73, 0.6: 0.82, 0.7: 0.92, 0.8: 1.03, 0.9: 1.14,
             1.0: 1.25},
        50: {0.1: 0.41, 0.2: 0.51, 0.3: 0.60, 0.4: 0.70, 0.5: 0.80, 0.6: 0.91, 0.7: 1.02, 0.8: 1.14, 0.9: 1.26,
             1.0: 1.39},
        55: {0.1: 0.47, 0.2: 0.58, 0.3: 0.69, 0.4: 0.80, 0.5: 0.92, 0.6: 1.04, 0.7: 1.16, 0.8: 1.30, 0.9: 1.44,
             1.0: 1.60},
        60: {0.1: 0.56, 0.2: 0.69, 0.3: 0.82, 0.4: 0.95, 0.5: 1.09, 0.6: 1.24, 0.7: 1.39, 0.8: 1.56, 0.9: 1.73,
             1.0: 1.92},
        65: {0.1: 0.70, 0.2: 0.87, 0.3: 1.04, 0.4: 1.21, 0.5: 1.39, 0.6: 1.58, 0.7: 1.77, 0.8: 1.98, 0.9: 2.21,
             1.0: 2.46},
        70: {0.1: 0.96, 0.2: 1.20, 0.3: 1.43, 0.4: 1.67, 0.5: 1.91, 0.6: 2.17, 0.7: 2.45, 0.8: 2.74, 0.9: 3.05,
             1.0: 3.39},
        75: {0.1: 1.47, 0.2: 1.83, 0.3: 2.19, 0.4: 2.56, 0.5: 2.94, 0.6: 3.35, 0.7: 3.78, 0.8: 4.23, 0.9: 4.72,
             1.0: 5.23},
        80: {0.1: 2.60, 0.2: 3.25, 0.3: 3.89, 0.4: 4.54, 0.5: 5.23, 0.6: 5.96, 0.7: 6.73, 0.8: 7.55, 0.9: 8.42,
             1.0: 9.35},
        85: {0.1: 5.59, 0.2: 6.98, 0.3: 8.36, 0.4: 9.79, 0.5: 11.29, 0.6: 12.87, 0.7: 14.55, 0.8: 16.34, 0.9: 18.24,
             1.0: 20.27}
    }
    if temp not in data:
        return "Temperature not in table"
    if ratio not in data[temp]:
        return "Ratio not in table"

    value = data[temp][ratio]
    return value
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Получение Kr
def get_kr(resistor_type, resistance):
    """
    Типы предусмотренных резисторов:
    Металлодиэлектрические и металлизированные, поглотители \n
    Композиционные пленочные \n
    Композиционные объемные \n
    Нагрузочные \n
    Прецизионные, особо стабильные и фольговые \n
    Керметные (кроме СПЗ-19) и металлокисные \n
    СПЗ-19 \n
    Композиционные пленочные непроволочные \n
    Композиционные объемные, потенциометры \n
    Подстроечные \n
    Регулировочные \n
    Наборы резисторов толстопленочные \n
    """
    resistor_data = {
        "Металлодиэлектрические и металлизированные, поглотители": {
            (0, 1e3): 1.0,
            (1e3, 1e5): 0.7,
            (1e5, 1e6): 2.0,
            (1e6, float('inf')): 0.6
        },
        "Композиционные пленочные": {
            (0, 1e7): 0.6,
            (1e7, float('inf')): 1.6
        },
        "Композиционные объемные": {
            (0, 150): 0.9,
            (150, 1e4): 1.5,
            (1e4, 1e6): 0.7
        },
        "Нагрузочные": [
            {"range": (0, 1e3), "K_R": 1.3},
            {"range": (1e3, 1e5), "K_R": 0.8},
            {"range": (1e5, 1e6), "K_R": 1.5}
        ],
        "Прецизионные, особо стабильные и фольговые": [
            {"range": (0, 1e3), "K_R": 1.6},
            {"range": (1e3, 1e5), "K_R": 1.0},
            {"range": (1e5, 1e6), "K_R": 0.4}
        ],
        "Керметные (кроме СПЗ-19) и металлокисные": [
            {"range": (0, 1e3), "K_R": 1.6},
            {"range": (1e3, 3.3e5), "K_R": 1.4},
            {"range": (3.3e5, float('inf')), "K_R": 1.0}
        ],
        "СПЗ-19": [
            {"range": (47, 1e5), "K_R": 5.1},
            {"range": (1e5, float('inf')), "K_R": 1.0}
        ],
        "Композиционные пленочные непроволочные": [
            {"range": (0, 1e3), "K_R": 1.0},
            {"range": (1e3, 1e5), "K_R": 0.5},
            {"range": (1e5, float('inf')), "K_R": 1.6}
        ],
        "Композиционные объемные, потенциометры": [
            {"range": (0, 1e3), "K_R": 0.5},
            {"range": (1e3, 1e5), "K_R": 0.5},
            {"range": (1e5, 1e6), "K_R": 0.4},
            {"range": (1e6, float('inf')), "K_R": 0.9}
        ],
        "Подстроечные": [
            {"range": (0, 1e3), "K_R": 1.9},
            {"range": (1e3, 1e5), "K_R": 0.3},
            {"range": (1e5, 1e6), "K_R": 0.8}
        ],
        "Регулировочные": [
            {"range": (0, 1e3), "K_R": 1.7},
            {"range": (1e3, 1e5), "K_R": 0.9},
            {"range": (1e5, 1e6), "K_R": 1.0}
        ],
        "Наборы резисторов толстопленочные": [
            {"range": (10, 150), "K_R": 0.5},
            {"range": (150, 1e5), "K_R": 1.0},
            {"range": (1e5, float('inf')), "K_R": 1.3}
        ]
    }
    if resistor_type not in resistor_data:
        return "Invalid resistor type"

    for (r_min, r_max), kr in resistor_data[resistor_type].items():
        if r_min <= resistance < r_max:
            return kr

    return "Resistance not in range"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Пoиски Km

def get_km(power):
    power_data = {
        (0.062, 0.5): 0.7,
        (1, 2): 1.5,
        (5, 10): 4.5
    }
    for (p_min, p_max), k_m in power_data.items():
        if p_min <= power <= p_max:
            return k_m
    return "Power not in range"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CONTROL POINT - есть Km, есть Kr, есть Kp
# ВЫЧИСЛЕНИЕ  Kэ
def get_ke(product_group, apparatus_group):
    ke_data = {
        "Постоянные непроволочные": {
            "1.1": 1, "1.2": 2, "1.3-1.10": 5,
            "2.1.1-2.3.2": 3, "2.1.3-2.3.4": 5, "2.2-2.3.5": 6,
            "3.1": 10, "3.2": 15, "3.3": 6, "3.4": 8,
            "4.1-4.9": 6, "4.6": 8, "5.1-5.2": 1
        },
        "Постоянные проволочные и фольговые": {
            "1.1": 1, "1.2": 2, "1.3-1.10": 5,
            "2.1.1-2.3.2": 3.5, "2.1.3-2.3.4": 5, "2.2-2.3.5": 6,
            "3.1": 10, "3.2": 15, "3.3": 6, "3.4": 10,
            "4.1-4.9": 6, "4.6": 8, "5.1-5.2": 1
        },
        "Переменные непроволочные": {
            "1.1": 2, "1.2": 5, "1.3-1.10": 6,
            "2.1.1-2.3.2": 5, "2.1.3-2.3.4": 7, "2.2-2.3.5": 10,
            "3.1": 18, "3.2": 15, "3.3": 23, "3.4": 11,
            "4.1-4.9": 15, "4.6": 8, "5.1-5.2": 1
        },
        "Переменные проволочные": {
            "1.1": 2, "1.2": 5, "1.3-1.10": 5,
            "2.1.1-2.3.2": 7, "2.1.3-2.3.4": 10, "2.2-2.3.5": 9,
            "3.1": 16, "3.2": 12, "3.3": 15, "3.4": 8,
            "4.1-4.9": 10, "4.6": 8, "5.1-5.2": 1
        },
        "Микросхемы резисторные, сборки, наборы резисторов": {
            "1.1": 2, "1.2": 5, "1.3-1.10": 10,
            "2.1.1-2.3.2": 7, "2.1.3-2.3.4": 10, "2.2-2.3.5": 10,
            "3.1": 15, "3.2": 10, "3.3": 15, "3.4": 6,
            "4.1-4.9": 15, "4.6": 8, "5.1-5.2": 1
        },
        "Терморезисторы": {
            "1.1": 2, "1.2": 5, "1.3-1.10": 5,
            "2.1.1-2.3.2": 10, "2.1.3-2.3.4": 10, "2.2-2.3.5": 10,
            "3.1": 15, "3.2": 10, "3.3": 15, "3.4": 6,
            "4.1-4.9": 15, "4.6": 8, "5.1-5.2": 1
        },
        "Поглотители": {
            "1.1": 2, "1.2": 5, "1.3-1.10": 5,
            "2.1.1-2.3.2": 10, "2.1.3-2.3.4": 10, "2.2-2.3.5": 10,
            "3.1": 15, "3.2": 10, "3.3": 15, "3.4": 6,
            "4.1-4.9": 15, "4.6": 8, "5.1-5.2": 1
        }
    }
    if product_group not in ke_data:
        return "Invalid product group"

    if apparatus_group not in ke_data[product_group]:
        return "Invalid apparatus group"

    return ke_data[product_group][apparatus_group]
# CONTROL POINT - есть Km, есть Kr, есть Kp, есть Kэ, есть LAMBDA b. не сделаны таблицы 5,8 (Kt.x.), 10(Km.),11(Ks.),12,13,14,15,16
namemodel = input("Введите название модели: ")
component_types = {
    0: "Резисторы постоянные непроволочные",
    1: "Резисторы постоянные проволочные и фольговые",
    2: "Резисторы переменные непроволочные",
    3: "Резисторы переменные проволочные и фольговые",
    4: "Терморезисторы",
    5: "Варисторы",
    6: "Потенциометры"
}
formula = ""
typemodel = ""
typeofformula = int(input("Какую формулу использовать: λб или λб.с.г (1 илм 2): "))
for idx, array in enumerate(arrays):
    for item in array:
        if(namemodel in item):
            if idx == 0:
                typemodel = input("Выберите тип детали:металлодиэлектрические,металлодиэлектрические , прецизионые,металлизированные, композиционные пленочные , композиционные объемные, если ничего из этого наберите 0: ")
                if typemodel == 0 or typemodel == "металлодиэлектрические":
                    if typeofformula == 1:
                        formula= "λэ = λб·Кр·КR·Км·Кстаб·Кэ·Кпр"
                    else:
                        formula = "λэ = λб.с.г·Кр·КR·Км·Кстаб·Кэ·Кпр"
                else:
                    if typeofformula != 2:
                        formula = "λэ = λб·Кр·КR·Кэ·Кп"
                    else:
                        formula = "λэ = λб.с.г·Кр·КR·Кэ·Кпр"
            elif idx == 1:
                typemodel = input("Выберите тип детали:нагрузочные,прецизионные,особостабильные,фольговые")
                if typeofformula == 1:
                    formula = "λэ = λб·Кр·КR·Кs·Кэ·Кп"
                else:
                    formula = "λэ = λб.с.г·Кр·КR·Кs·Кэ·Кпр"
            elif idx == 2:
                typemodel = input("Выберите тип детали:металлоокисные,керметные,композиционные пленочные,композиционные объемные,потенциометры")
                if typeofformula == 1:
                    formula ="λэ = λб·Кр·КR·Кэ·Кп"
                else:
                    formula = "λэ = λб.с.г·Кр·КR·Кэ·Кпр"

            elif idx == 3:
                typemodel = input("Выберите тип детали:подстроечные,регулировочные")
                if typeofformula == 1:
                    formula = "λэ = λб·Кр·КR·Кэ·Кп"
                else:
                    formula = "λэ = λб.с.г·Кр·КR·Кэ·Кпр"
            elif idx == 4:
                if typeofformula == 1:
                    formula = "λэ = λб·Кэ·Кп"
                else:
                    formula = "λэ = λб.с.г·Кэ·Кпр"


'''
for idx, array in enumerate(arrays):
    for item in array:
        if namemodel in item:
            print(f"  {idx, item}")
'''
print(formula)
def get_lambda_b(model_type):
    data = {
        "P1-1": 0.049,
        "P1-2": 0.049,
        "P1-3": 0.049,
        "P1-5": 0.049,
        "Р1-8МП": 0.049,
        "P1-9": 0.049,
        "P1-10": 0.049,
        "P1-21": 0.049,
        "P1-33": 0.049,
        "P1-47": 0.049,
        "P1-74": 0.049,
        "P1-4": 0.063,
        "P1-11": 0.063,
        "P1-12": 0.063,
        "C2-23": 0.063,
        "C2-33": 0.063,
        "C1-4": 0.068,
        "P1-6": 0.037,
        "P1-8": 0.037,
        "C2-10": 0.037,
        "C2-10a, 6": 0.037,
        "C2-34": 0.037,
        "C2-34M": 0.037,
        "P1-16": 0.039,
        "P1-16П": 0.039,
        "P1-24": 0.039,
        "C2-29B": 0.039,
        "C2-31A": 0.039,
        "C2-31Б": 0.039,
        "C2-36": 0.039,
        "C6-2": 0.037,
        "C6-3": 0.037,
        "C6-4": 0.037,
        "C6-5": 0.037,
        "C6-6-II": 0.037,
        "C6-7": 0.037,
        "C6-8": 0.037,
        "C6-9": 0.037,
        "КЭВ": 0.03,
        "C3-12": 0.03,
        "C3-14": 0.03,
        "C3-15": 0.03,
        "C4-2": 0.035,
        "ТВО": 0.035,
        "C4-3": 0.035,
        "УНЧ": 0.035,
        "УНЧ-Ш": 0.035,
        "P2-75": 0.029,
        "C5-35В": 0.1,
        "C5-36В": 0.023,
        "C5-37В": 0.023,
        "ПЭВ": 0.023,
        "ПЭВР": 0.023,
        "ПЭВТ": 0.023,
        "C5-40": 0.03,
        "C5-43, C5-43А": 0.01,
        "C5-47, C5-47А": 0.01,
        "C5-5, C5-5В": 0.032,
        "C5-14В, C5-14ВП, C5-17В": 0.013,
        "C5-16В, C5-16МВ": 0.0013,
        "C5-25В, C5-25В1": 0.0047,
        "C5-42В": 0.0047,
        "C5-53, C5-54": 0.0075,
        "C5-60": 0.0075,
        "C5-60А, B, C5-60Б1": 0.0075,
        "C5-60B": 0.0075,
        "C5-25Ф": 0.0075,
        "C5-35Ф": 0.0075,
        "C5-53Ф": 0.0075,
        "P2-67": 0.0075,
        "СП2-6а,б,в": 0.006,
        "РП1-46": 0.0087,
        "РП1-48": 0.0087,
        "РП1-48А, Б": 0.0087,
        "РП1-75": 0.0087,
        "РП1-314": 0.0087,
        "СП3-19а,б, а1, а2": 0.024,
        "СП3-28": 0.0087,
        "СП3-37А, Б": 0.0087,
        "СП3-39А, Б, СП3-39Н": 0.023,
        "СП3-44А": 0.012,
        "СП3-44Б": 0.007,
        "СП3-45а": 0.0087,
        "СП3-45б": 0.0087,
        "СП3-16, 16а, 166": 0.003,
        "СП4-1а, 16, 1в": 0.014,
        "СП4-2М, СП4-2Ма, СП4-2Мб": 0.014,
        "СП4-3": 0.014,
        "СП4-4": 0.014,
        "СП4-8-1": 0.015,
        "СП4-8-2": 0.015,
        "СП4-8-3": 0.015,
        "СП4-8-4": 0.015,
        "ПП1-2": 0.015,
        "ПП1-7В": 0.015,
        "ЭР1-1": 0.015,
        "РП2-57": 0.017,
        "СП5-1В1": 0.017,
        "СП5-2": 0.054,
        "СП5-2В": 0.1,
        "СП5-2ВА, СП5-2ВБ": 0.01,
        "СП5-3": 0.071,
        "СП5-3В": 0.015,
        "СП5-3ВА": 0.017,
        "СП5-4В1": 0.0065,
        "СП5-16ВА, 16ВБ, 16ВВ, СП5-16ВГ": 0.013,
        "СП5-20В": 0.006,
        "СП5-22": 0.0027,
        "СП5-24": 0.0027,
        "СП5-37В": 0.017,
        "ППБ-1,2,3": 0.005,
        "ППЗ-40, ППЗ-47": 0.005,
        "СП5-21А, 21Б, 21В, 21Г": 0.004,
        "СП5-30 ": 0.02,
        "СП5-39А, 39Б": 0.02,
        "КМТ-1": 0.007,                        # ALARM ДОПИЛИТЬ ДЛО УМА, ТАМ СЛОЖНО В ТАБЛИЦЕ
        "КМТ-4а,6,6в": 0.007,                  #
        "КМТ-8": 0.007,                         #
        "КМТ-17в": 0.007,                        #
        "ММТ-1": 0.007,                      #
        "ММТ-4а,6,6в": 0.007,                 #
        "ММТ-8": 0.0070,
        "ММТ-9": 0.0070,
        "ММТ-13в": 0.0070,
        "СТ1-17": 0.0070,
        "СТ1-18": 0.0070,
        "СТ1-19": 0.0070,
        "СТ3-14": 0.0070,
        "СТ3-17": 0.0070,
        "СТ3-24а": 0.0070,
        "СТ3-33": 0.0070,
        "СТ4-16": 0.0070,
        "СТ4-16а": 0.0070,
        "СТ6-1Б-1": 0.0070,
        "СТ6-1Б-2": 0.0070,
        "СТ6-4Б": 0.0070,
        "СТ6-4Б-1": 0.0070,
        "СТ14-3": 0.0070,
        "ТР-1": 0.0070,
        "ТР-2": 0.0070,
        "ТР-4 ": 0.0070,
        "ТР-6": 0.0070,
        "ТР-9": 0.0070,
        "ТРП-24": 0.0070,
        "ТРП-24М": 0.0070,
        "301НР1-301НР6": 0.0092,
        "301НР7-301НР12": 0.0092,
        "302НР1-301НР3": 0.0092,
        "302НР4": 0.0092,
        "304ИД1-304ИД6": 0.0092,
        "308НР4-308НР6": 0.0092,
        "313НР1": 0.0092,
        "313НР210, 211, 220, 221, 240, 241, 310, 311, 313, 314, 410, 411": 0.0092,
        "315НР1": 0.0092,
        "315НР1, 313НР9": 0.0092,
        "318НР12-318НР15": 0.0092,
        "319НР1А,Б-Н305А,Б": 0.0092,
        "H317НР1-2": 0.0092,
        "H320НР1, 2": 0.0092,
        "НР1-3": 0.0092,
        "НР1-17": 0.0092,
        "НР1-21": 0.0092,
        "НР1-22": 0.0092,
        "НР1-27": 0.0092,
        "НР1-28": 0.0092,
        "НР1-29": 0.0092,
        "НР1-30": 0.0092,
        "НР1-31": 0.0092,
        "НР1-33": 0.0092,
        "НР1-43": 0.0092,
        "НР1-51А": 0.0092,
        "НР1-56-8": 0.0092,
        "НР1-57-9, НР1-57-12": 0.0092,
        "НР2-2": 0.0092,
        "НР2-6": 0.0092,
        "НРК1-1": 0.0092,
        "НРК1-4": 0.0092,
        "Б19, Б19М, Б20К": 0.015,
        "Б19К-1, Б19К-2, Б19К-3": 0.015,
        "Б20М-3-1": 0.015,
        "ПР1-1": 0.05,
        "ПР1-И3": 0.05,
        "ПР1-7": 0.05,
        "ПР1-10": 0.05,
        "ПР1-10Г": 0.05,
        "ПР1-И11, ПР1-И13": 0.05,
        "ПР1-8": 0.05,
        "П2-4": 0.05,
    }
    for i in model_type.split(" "):
        if i in data:
            return data[i]*10**-6
    else:
        return "Model type not found or λб not listed."
def get_resistor_k_stab(tolerance, resistor_type):
    '''
    Металлоплёночные резисторы (кроме прецизионных) \n,
    Прецизионные резисторы
    '''
    resistor_tolerances = {
        "Металлоплёночные резисторы (кроме прецизионных)": {
            0.5: 2,
            1: 1,
            2: 1,
            5: 1,
            10: 1
        },
        "Прецизионные резисторы": {
            0.05: 5,
            0.1: 2.5,
            0.25: 1,
            0.5: 0.1,
            1: 0.05,
            2: 0.05,
            5: 0.05,
            10: 0.05
        }
    }

    if resistor_type in resistor_tolerances:
        tolerances = resistor_tolerances[resistor_type]
        if tolerance in tolerances:
            return tolerances[tolerance]
        else:
            return f"Допуск {tolerance}% не найден для типа изделия {resistor_type}"
    else:
        return f"Тип изделия {resistor_type} не найден"

print("lambda_b :", get_lambda_b(namemodel))
print("KP :",get_KP_coefficient_metalized(30,0.1))
print("Kr :",get_kr("Металлодиэлектрические и металлизированные, поглотители",4640))
print("Km  :", get_km(0.125))
print("Kстаб: ", get_resistor_k_stab(1,"Прецизионные резисторы"))
# осталось Кпр, Кстаб
# тип детали по табличке
